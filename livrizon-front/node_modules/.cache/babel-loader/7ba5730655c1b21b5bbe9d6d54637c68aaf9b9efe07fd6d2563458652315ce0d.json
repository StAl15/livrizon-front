{"ast":null,"code":"import debugIt from 'debug';\nexport { processOptions, validateOptions } from './_chunks/defaultOptionsValidator-4ba94809.js';\nimport { isPlainObject } from 'is-plain-object';\nconst leadingSlash = /^\\//;\nconst trailingSlash = /\\/$/;\nfunction base(baseUrl) {\n  const baseUri = baseUrl.replace(trailingSlash, \"\");\n  return {\n    processOptions: options => {\n      if (/^https?:\\/\\//i.test(options.url)) {\n        return options;\n      }\n      const url = [baseUri, options.url.replace(leadingSlash, \"\")].join(\"/\");\n      return Object.assign({}, options, {\n        url\n      });\n    }\n  };\n}\nconst SENSITIVE_HEADERS = [\"cookie\", \"authorization\"];\nconst hasOwn = Object.prototype.hasOwnProperty;\nconst redactKeys = (source, redacted) => {\n  const target = {};\n  for (const key in source) {\n    if (hasOwn.call(source, key)) {\n      target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? \"<redacted>\" : source[key];\n    }\n  }\n  return target;\n};\nfunction debug() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const verbose = opts.verbose;\n  const namespace = opts.namespace || \"get-it\";\n  const defaultLogger = debugIt(namespace);\n  const log = opts.log || defaultLogger;\n  const shortCircuit = log === defaultLogger && !debugIt.enabled(namespace);\n  let requestId = 0;\n  return {\n    processOptions: options => {\n      options.debug = log;\n      options.requestId = options.requestId || ++requestId;\n      return options;\n    },\n    onRequest: event => {\n      if (shortCircuit || !event) {\n        return event;\n      }\n      const options = event.options;\n      log(\"[%s] HTTP %s %s\", options.requestId, options.method, options.url);\n      if (verbose && options.body && typeof options.body === \"string\") {\n        log(\"[%s] Request body: %s\", options.requestId, options.body);\n      }\n      if (verbose && options.headers) {\n        const headers = opts.redactSensitiveHeaders === false ? options.headers : redactKeys(options.headers, SENSITIVE_HEADERS);\n        log(\"[%s] Request headers: %s\", options.requestId, JSON.stringify(headers, null, 2));\n      }\n      return event;\n    },\n    onResponse: (res, context) => {\n      if (shortCircuit || !res) {\n        return res;\n      }\n      const reqId = context.options.requestId;\n      log(\"[%s] Response code: %s %s\", reqId, res.statusCode, res.statusMessage);\n      if (verbose && res.body) {\n        log(\"[%s] Response body: %s\", reqId, stringifyBody(res));\n      }\n      return res;\n    },\n    onError: (err, context) => {\n      const reqId = context.options.requestId;\n      if (!err) {\n        log(\"[%s] Error encountered, but handled by an earlier middleware\", reqId);\n        return err;\n      }\n      log(\"[%s] ERROR: %s\", reqId, err.message);\n      return err;\n    }\n  };\n}\nfunction stringifyBody(res) {\n  const contentType = (res.headers[\"content-type\"] || \"\").toLowerCase();\n  const isJson = contentType.indexOf(\"application/json\") !== -1;\n  return isJson ? tryFormat(res.body) : res.body;\n}\nfunction tryFormat(body) {\n  try {\n    const parsed = typeof body === \"string\" ? JSON.parse(body) : body;\n    return JSON.stringify(parsed, null, 2);\n  } catch (err) {\n    return body;\n  }\n}\nfunction headers(_headers) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    processOptions: options => {\n      const existing = options.headers || {};\n      options.headers = opts.override ? Object.assign({}, existing, _headers) : Object.assign({}, _headers, existing);\n      return options;\n    }\n  };\n}\nclass HttpError extends Error {\n  constructor(res, ctx) {\n    super();\n    const truncatedUrl = res.url.length > 400 ? \"\".concat(res.url.slice(0, 399), \"\\u2026\") : res.url;\n    let msg = \"\".concat(res.method, \"-request to \").concat(truncatedUrl, \" resulted in \");\n    msg += \"HTTP \".concat(res.statusCode, \" \").concat(res.statusMessage);\n    this.message = msg.trim();\n    this.response = res;\n    this.request = ctx.options;\n  }\n}\nfunction httpErrors() {\n  return {\n    onResponse: (res, ctx) => {\n      const isHttpError = res.statusCode >= 400;\n      if (!isHttpError) {\n        return res;\n      }\n      throw new HttpError(res, ctx);\n    }\n  };\n}\nfunction injectResponse() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof opts.inject !== \"function\") {\n    throw new Error(\"`injectResponse` middleware requires a `inject` function\");\n  }\n  function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue);\n    if (!response) {\n      return prevValue;\n    }\n    const options = event.context.options;\n    return Object.assign({}, {\n      body: \"\",\n      url: options.url,\n      method: options.method,\n      headers: {},\n      statusCode: 200,\n      statusMessage: \"OK\"\n    }, response);\n  }\n  return {\n    interceptRequest: inject\n  };\n}\nconst isBuffer = typeof Buffer === \"undefined\" ? () => false : obj => Buffer.isBuffer(obj);\nconst serializeTypes = [\"boolean\", \"string\", \"number\"];\nfunction jsonRequest() {\n  return {\n    processOptions: options => {\n      const body = options.body;\n      if (!body) {\n        return options;\n      }\n      const isStream = typeof body.pipe === \"function\";\n      const shouldSerialize = !isStream && !isBuffer(body) && (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body));\n      if (!shouldSerialize) {\n        return options;\n      }\n      return Object.assign({}, options, {\n        body: JSON.stringify(options.body),\n        headers: Object.assign({}, options.headers, {\n          \"Content-Type\": \"application/json\"\n        })\n      });\n    }\n  };\n}\nfunction jsonResponse(opts) {\n  return {\n    onResponse: response => {\n      const contentType = response.headers[\"content-type\"] || \"\";\n      const shouldDecode = opts && opts.force || contentType.indexOf(\"application/json\") !== -1;\n      if (!response.body || !contentType || !shouldDecode) {\n        return response;\n      }\n      return Object.assign({}, response, {\n        body: tryParse(response.body)\n      });\n    },\n    processOptions: options => Object.assign({}, options, {\n      headers: Object.assign({\n        Accept: \"application/json\"\n      }, options.headers)\n    })\n  };\n  function tryParse(body) {\n    try {\n      return JSON.parse(body);\n    } catch (err) {\n      err.message = \"Failed to parsed response body as JSON: \".concat(err.message);\n      throw err;\n    }\n  }\n}\nfunction keepAlive() {}\nfunction mtls() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!config.ca) {\n    throw new Error('Required mtls option \"ca\" is missing');\n  }\n  if (!config.cert) {\n    throw new Error('Required mtls option \"cert\" is missing');\n  }\n  if (!config.key) {\n    throw new Error('Required mtls option \"key\" is missing');\n  }\n  return {\n    finalizeOptions: options => {\n      const mtlsOpts = {\n        cert: config.cert,\n        key: config.key,\n        ca: config.ca\n      };\n      return Object.assign({}, options, mtlsOpts);\n    }\n  };\n}\nlet actualGlobal;\nif (typeof globalThis !== \"undefined\") {\n  actualGlobal = globalThis;\n} else if (typeof window !== \"undefined\") {\n  actualGlobal = window;\n} else if (typeof global !== \"undefined\") {\n  actualGlobal = global;\n} else if (typeof self !== \"undefined\") {\n  actualGlobal = self;\n} else {\n  actualGlobal = {};\n}\nvar global$1 = actualGlobal;\nfunction observable() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const Observable = opts.implementation || global$1.Observable;\n  if (!Observable) {\n    throw new Error(\"`Observable` is not available in global scope, and no implementation was passed\");\n  }\n  return {\n    onReturn: (channels, context) => new Observable(observer => {\n      channels.error.subscribe(err => observer.error(err));\n      channels.progress.subscribe(event => observer.next(Object.assign({\n        type: \"progress\"\n      }, event)));\n      channels.response.subscribe(response => {\n        observer.next(Object.assign({\n          type: \"response\"\n        }, response));\n        observer.complete();\n      });\n      channels.request.publish(context);\n      return () => channels.abort.publish();\n    })\n  };\n}\nfunction progress() {\n  return {\n    onRequest: evt => {\n      if (evt.adapter !== \"xhr\") {\n        return;\n      }\n      const xhr = evt.request;\n      const context = evt.context;\n      if (\"upload\" in xhr && \"onprogress\" in xhr.upload) {\n        xhr.upload.onprogress = handleProgress(\"upload\");\n      }\n      if (\"onprogress\" in xhr) {\n        xhr.onprogress = handleProgress(\"download\");\n      }\n      function handleProgress(stage) {\n        return event => {\n          const percent = event.lengthComputable ? event.loaded / event.total * 100 : -1;\n          context.channels.progress.publish({\n            stage,\n            percent,\n            total: event.total,\n            loaded: event.loaded,\n            lengthComputable: event.lengthComputable\n          });\n        };\n      }\n    }\n  };\n}\nconst promise = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const PromiseImplementation = options.implementation || Promise;\n  if (!PromiseImplementation) {\n    throw new Error(\"`Promise` is not available in global scope, and no implementation was passed\");\n  }\n  return {\n    onReturn: (channels, context) => new PromiseImplementation((resolve, reject) => {\n      const cancel = context.options.cancelToken;\n      if (cancel) {\n        cancel.promise.then(reason => {\n          channels.abort.publish(reason);\n          reject(reason);\n        });\n      }\n      channels.error.subscribe(reject);\n      channels.response.subscribe(response => {\n        resolve(options.onlyBody ? response.body : response);\n      });\n      setTimeout(() => {\n        try {\n          channels.request.publish(context);\n        } catch (err) {\n          reject(err);\n        }\n      }, 0);\n    })\n  };\n};\nclass Cancel {\n  constructor(message) {\n    this.__CANCEL__ = true;\n    this.message = message;\n  }\n  toString() {\n    return \"Cancel\".concat(this.message ? \": \".concat(this.message) : \"\");\n  }\n}\nconst _CancelToken = class {\n  constructor(executor) {\n    if (typeof executor !== \"function\") {\n      throw new TypeError(\"executor must be a function.\");\n    }\n    let resolvePromise = null;\n    this.promise = new Promise(resolve => {\n      resolvePromise = resolve;\n    });\n    executor(message => {\n      if (this.reason) {\n        return;\n      }\n      this.reason = new Cancel(message);\n      resolvePromise(this.reason);\n    });\n  }\n};\nlet CancelToken = _CancelToken;\nCancelToken.source = () => {\n  let cancel;\n  const token = new _CancelToken(can => {\n    cancel = can;\n  });\n  return {\n    token,\n    cancel\n  };\n};\nconst isCancel = value => !!(value && value.__CANCEL__);\npromise.Cancel = Cancel;\npromise.CancelToken = CancelToken;\npromise.isCancel = isCancel;\nfunction proxy(_proxy) {\n  if (_proxy !== false && (!_proxy || !_proxy.host)) {\n    throw new Error(\"Proxy middleware takes an object of host, port and auth properties\");\n  }\n  return {\n    processOptions: options => Object.assign({\n      proxy: _proxy\n    }, options)\n  };\n}\nvar defaultShouldRetry = (err, attempt, options) => {\n  if (options.method !== \"GET\" && options.method !== \"HEAD\") {\n    return false;\n  }\n  return err.isNetworkError || false;\n};\nconst isStream = stream => stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\nvar sharedRetry = opts => {\n  const maxRetries = opts.maxRetries || 5;\n  const retryDelay = opts.retryDelay || getRetryDelay;\n  const allowRetry = opts.shouldRetry;\n  return {\n    onError: (err, context) => {\n      const options = context.options;\n      const max = options.maxRetries || maxRetries;\n      const shouldRetry = options.shouldRetry || allowRetry;\n      const attemptNumber = options.attemptNumber || 0;\n      if (isStream(options.body)) {\n        return err;\n      }\n      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n        return err;\n      }\n      const newContext = Object.assign({}, context, {\n        options: Object.assign({}, options, {\n          attemptNumber: attemptNumber + 1\n        })\n      });\n      setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber));\n      return null;\n    }\n  };\n};\nfunction getRetryDelay(attemptNum) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100;\n}\nconst retry = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return sharedRetry({\n    shouldRetry: defaultShouldRetry,\n    ...opts\n  });\n};\nretry.shouldRetry = defaultShouldRetry;\nfunction encode(data) {\n  const query = new URLSearchParams();\n  const nest = (name, _value) => {\n    const value = _value instanceof Set ? Array.from(_value) : _value;\n    if (Array.isArray(value)) {\n      if (value.length) {\n        for (const index in value) {\n          nest(\"\".concat(name, \"[\").concat(index, \"]\"), value[index]);\n        }\n      } else {\n        query.append(\"\".concat(name, \"[]\"), \"\");\n      }\n    } else if (typeof value === \"object\" && value !== null) {\n      for (const [key, obj] of Object.entries(value)) {\n        nest(\"\".concat(name, \"[\").concat(key, \"]\"), obj);\n      }\n    } else {\n      query.append(name, value);\n    }\n  };\n  for (const [key, value] of Object.entries(data)) {\n    nest(key, value);\n  }\n  return query.toString();\n}\nfunction urlEncoded() {\n  return {\n    processOptions: options => {\n      const body = options.body;\n      if (!body) {\n        return options;\n      }\n      const isStream = typeof body.pipe === \"function\";\n      const shouldSerialize = !isStream && !isBuffer(body) && isPlainObject(body);\n      if (!shouldSerialize) {\n        return options;\n      }\n      return {\n        ...options,\n        body: encode(options.body),\n        headers: {\n          ...options.headers,\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      };\n    }\n  };\n}\nexport { Cancel, CancelToken, base, debug, headers, httpErrors, injectResponse, jsonRequest, jsonResponse, keepAlive, mtls, observable, progress, promise, proxy, retry, urlEncoded };","map":{"version":3,"mappings":"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","names":["leadingSlash","trailingSlash","base","baseUrl","baseUri","replace","processOptions","options","Object","assign","url","SENSITIVE_HEADERS","hasOwn","prototype","redactKeys","source","redacted","target","key","indexOf","toLowerCase","opts","verbose","namespace","debugIt","log","shortCircuit","enabled","requestId","debug","onRequest","event","body","headers","redactSensitiveHeaders","stringify","onResponse","res","context","statusMessage","stringifyBody","onError","err","reqId","message","contentType","isJson","tryFormat","parsed","JSON","override","existing","_headers","HttpError","Error","constructor","ctx","truncatedUrl","slice","method","msg","trim","response","request","httpErrors","statusCode","isHttpError","prevValue","inject","interceptRequest","Buffer","obj","serializeTypes","jsonRequest","pipe","shouldSerialize","isStream","isBuffer","isArray","isPlainObject","jsonResponse","shouldDecode","force","tryParse","Accept","parse","keepAlive","config","ca","cert","finalizeOptions","mtlsOpts","actualGlobal","globalThis","window","global","self","Observable","onReturn","channels","observer","error","subscribe","progress","next","type","complete","publish","evt","adapter","xhr","upload","onprogress","handleProgress","stage","percent","loaded","total","lengthComputable","promise","implementation","PromiseImplementation","resolve","reject","cancel","then","reason","setTimeout","Cancel","toString","_CancelToken","executor","TypeError","resolvePromise","Promise","CancelToken","token","can","isCancel","value","proxy","_proxy","host","isNetworkError","stream","sharedRetry","maxRetries","retryDelay","allowRetry","shouldRetry","attemptNumber","max","newContext","getRetryDelay","attemptNum","Math","pow","random","retry","encode","data","URLSearchParams","name","_value","Array","length","index","nest","query","urlEncoded"],"sources":["/Users/rgthardkor/node_modules/get-it/src/middleware/base.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/debug.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/headers.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/httpErrors.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/injectResponse.ts","/Users/rgthardkor/node_modules/get-it/src/util/isBuffer.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/jsonRequest.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/jsonResponse.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/keepAlive/browser-keepAlive.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/mtls.ts","/Users/rgthardkor/node_modules/get-it/src/util/global.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/observable.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/progress/browser-progress.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/promise.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/proxy.ts","/Users/rgthardkor/node_modules/get-it/src/util/browser-shouldRetry.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/retry/shared-retry.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/retry/browser-retry.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/urlEncoded.ts"],"sourcesContent":["const leadingSlash = /^\\//\nconst trailingSlash = /\\/$/\n\n/** @public */\nexport function base(baseUrl: any): any {\n  const baseUri = baseUrl.replace(trailingSlash, '')\n  return {\n    processOptions: (options: any) => {\n      if (/^https?:\\/\\//i.test(options.url)) {\n        return options // Already prefixed\n      }\n\n      const url = [baseUri, options.url.replace(leadingSlash, '')].join('/')\n      return Object.assign({}, options, {url})\n    },\n  }\n}\n","import debugIt from 'debug'\n\nconst SENSITIVE_HEADERS = ['cookie', 'authorization']\n\nconst hasOwn = Object.prototype.hasOwnProperty\nconst redactKeys = (source: any, redacted: any) => {\n  const target: any = {}\n  for (const key in source) {\n    if (hasOwn.call(source, key)) {\n      target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? '<redacted>' : source[key]\n    }\n  }\n  return target\n}\n\n/** @public */\nexport function debug(opts: any = {}): any {\n  const verbose = opts.verbose\n  const namespace = opts.namespace || 'get-it'\n  const defaultLogger = debugIt(namespace)\n  const log = opts.log || defaultLogger\n  const shortCircuit = log === defaultLogger && !debugIt.enabled(namespace)\n  let requestId = 0\n\n  return {\n    processOptions: (options: any) => {\n      options.debug = log\n      options.requestId = options.requestId || ++requestId\n      return options\n    },\n\n    onRequest: (event: any) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !event) {\n        return event\n      }\n\n      const options = event.options\n\n      log('[%s] HTTP %s %s', options.requestId, options.method, options.url)\n\n      if (verbose && options.body && typeof options.body === 'string') {\n        log('[%s] Request body: %s', options.requestId, options.body)\n      }\n\n      if (verbose && options.headers) {\n        const headers =\n          opts.redactSensitiveHeaders === false\n            ? options.headers\n            : redactKeys(options.headers, SENSITIVE_HEADERS)\n\n        log('[%s] Request headers: %s', options.requestId, JSON.stringify(headers, null, 2))\n      }\n\n      return event\n    },\n\n    onResponse: (res: any, context: any) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !res) {\n        return res\n      }\n\n      const reqId = context.options.requestId\n\n      log('[%s] Response code: %s %s', reqId, res.statusCode, res.statusMessage)\n\n      if (verbose && res.body) {\n        log('[%s] Response body: %s', reqId, stringifyBody(res))\n      }\n\n      return res\n    },\n\n    onError: (err: any, context: any) => {\n      const reqId = context.options.requestId\n      if (!err) {\n        log('[%s] Error encountered, but handled by an earlier middleware', reqId)\n        return err\n      }\n\n      log('[%s] ERROR: %s', reqId, err.message)\n      return err\n    },\n  }\n}\n\nfunction stringifyBody(res: any) {\n  const contentType = (res.headers['content-type'] || '').toLowerCase()\n  const isJson = contentType.indexOf('application/json') !== -1\n  return isJson ? tryFormat(res.body) : res.body\n}\n\n// Attempt pretty-formatting JSON\nfunction tryFormat(body: any) {\n  try {\n    const parsed = typeof body === 'string' ? JSON.parse(body) : body\n    return JSON.stringify(parsed, null, 2)\n  } catch (err) {\n    return body\n  }\n}\n","/** @public */\nexport function headers(_headers: any, opts: any = {}): any {\n  return {\n    processOptions: (options: any) => {\n      const existing = options.headers || {}\n      options.headers = opts.override\n        ? Object.assign({}, existing, _headers)\n        : Object.assign({}, _headers, existing)\n\n      return options\n    },\n  }\n}\n","class HttpError extends Error {\n  response: any\n  request: any\n  constructor(res: any, ctx: any) {\n    super()\n    const truncatedUrl = res.url.length > 400 ? `${res.url.slice(0, 399)}…` : res.url\n    let msg = `${res.method}-request to ${truncatedUrl} resulted in `\n    msg += `HTTP ${res.statusCode} ${res.statusMessage}`\n\n    this.message = msg.trim()\n    this.response = res\n    this.request = ctx.options\n  }\n}\n\n/** @public */\nexport function httpErrors() {\n  return {\n    onResponse: (res: any, ctx: any) => {\n      const isHttpError = res.statusCode >= 400\n      if (!isHttpError) {\n        return res\n      }\n\n      throw new HttpError(res, ctx)\n    },\n  }\n}\n","/** @public */\nexport function injectResponse(opts: any = {}) {\n  if (typeof opts.inject !== 'function') {\n    throw new Error('`injectResponse` middleware requires a `inject` function')\n  }\n\n  function inject(prevValue: any, event: any) {\n    const response = opts.inject(event, prevValue)\n    if (!response) {\n      return prevValue\n    }\n\n    // Merge defaults so we don't have to provide the most basic of details unless we want to\n    const options = event.context.options\n    return Object.assign(\n      {},\n      {\n        body: '',\n        url: options.url,\n        method: options.method,\n        headers: {},\n        statusCode: 200,\n        statusMessage: 'OK',\n      },\n      response\n    )\n  }\n\n  return {interceptRequest: inject}\n}\n","export const isBuffer =\n  typeof Buffer === 'undefined' ? () => false : (obj: unknown) => Buffer.isBuffer(obj)\n","import {isPlainObject} from 'is-plain-object'\n\nimport {isBuffer} from '../util/isBuffer'\n\nconst serializeTypes = ['boolean', 'string', 'number']\n\n/** @public */\nexport function jsonRequest() {\n  return {\n    processOptions: (options: any) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize =\n        !isStream &&\n        !isBuffer(body) &&\n        (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body))\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return Object.assign({}, options, {\n        body: JSON.stringify(options.body),\n        headers: Object.assign({}, options.headers, {\n          'Content-Type': 'application/json',\n        }),\n      })\n    },\n  }\n}\n","/** @public */\nexport function jsonResponse(opts?: any) {\n  return {\n    onResponse: (response: any) => {\n      const contentType = response.headers['content-type'] || ''\n      const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n      if (!response.body || !contentType || !shouldDecode) {\n        return response\n      }\n\n      return Object.assign({}, response, {body: tryParse(response.body)})\n    },\n\n    processOptions: (options: any) =>\n      Object.assign({}, options, {\n        headers: Object.assign({Accept: 'application/json'}, options.headers),\n      }),\n  }\n\n  function tryParse(body: any) {\n    try {\n      return JSON.parse(body)\n    } catch (err: any) {\n      err.message = `Failed to parsed response body as JSON: ${err.message}`\n      throw err\n    }\n  }\n}\n","// not applicable in the browser so we just return a noop function\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function keepAlive(): void {}\n","/** @public */\nexport function mtls(config: any = {}) {\n  if (!config.ca) {\n    throw new Error('Required mtls option \"ca\" is missing')\n  }\n  if (!config.cert) {\n    throw new Error('Required mtls option \"cert\" is missing')\n  }\n  if (!config.key) {\n    throw new Error('Required mtls option \"key\" is missing')\n  }\n\n  return {\n    finalizeOptions: (options: any) => {\n      const mtlsOpts = {\n        cert: config.cert,\n        key: config.key,\n        ca: config.ca,\n      }\n      return Object.assign({}, options, mtlsOpts)\n    },\n  }\n}\n","let actualGlobal: typeof globalThis\n\nif (typeof globalThis !== 'undefined') {\n  actualGlobal = globalThis\n} else if (typeof window !== 'undefined') {\n  actualGlobal = window\n} else if (typeof global !== 'undefined') {\n  actualGlobal = global\n} else if (typeof self !== 'undefined') {\n  actualGlobal = self\n} else {\n  actualGlobal = {} as any\n}\n\nexport default actualGlobal\n","import global from '../util/global'\n\n/** @public */\nexport function observable(opts: any = {}) {\n  const Observable = opts.implementation || global.Observable\n  if (!Observable) {\n    throw new Error(\n      '`Observable` is not available in global scope, and no implementation was passed'\n    )\n  }\n\n  return {\n    onReturn: (channels: any, context: any) =>\n      new Observable((observer: any) => {\n        channels.error.subscribe((err: any) => observer.error(err))\n        channels.progress.subscribe((event: any) =>\n          observer.next(Object.assign({type: 'progress'}, event))\n        )\n        channels.response.subscribe((response: any) => {\n          observer.next(Object.assign({type: 'response'}, response))\n          observer.complete()\n        })\n\n        channels.request.publish(context)\n        return () => channels.abort.publish()\n      }),\n  }\n}\n","export function progress() {\n  return {\n    onRequest: (evt: any) => {\n      if (evt.adapter !== 'xhr') {\n        return\n      }\n\n      const xhr = evt.request\n      const context = evt.context\n\n      if ('upload' in xhr && 'onprogress' in xhr.upload) {\n        xhr.upload.onprogress = handleProgress('upload')\n      }\n\n      if ('onprogress' in xhr) {\n        xhr.onprogress = handleProgress('download')\n      }\n\n      function handleProgress(stage: any) {\n        return (event: any) => {\n          const percent = event.lengthComputable ? (event.loaded / event.total) * 100 : -1\n          context.channels.progress.publish({\n            stage,\n            percent,\n            total: event.total,\n            loaded: event.loaded,\n            lengthComputable: event.lengthComputable,\n          })\n        }\n      }\n    },\n  }\n}\n","/** @public */\nexport const promise = (options: any = {}) => {\n  const PromiseImplementation = options.implementation || Promise\n  if (!PromiseImplementation) {\n    throw new Error('`Promise` is not available in global scope, and no implementation was passed')\n  }\n\n  return {\n    onReturn: (channels: any, context: any) =>\n      new PromiseImplementation((resolve: any, reject: any) => {\n        const cancel = context.options.cancelToken\n        if (cancel) {\n          cancel.promise.then((reason: any) => {\n            channels.abort.publish(reason)\n            reject(reason)\n          })\n        }\n\n        channels.error.subscribe(reject)\n        channels.response.subscribe((response: any) => {\n          resolve(options.onlyBody ? response.body : response)\n        })\n\n        // Wait until next tick in case cancel has been performed\n        setTimeout(() => {\n          try {\n            channels.request.publish(context)\n          } catch (err) {\n            reject(err)\n          }\n        }, 0)\n      }),\n  }\n}\n\n/**\n * The cancel token API is based on the [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises), which is currently at Stage 1.\n *\n * Code shamelessly stolen/borrowed from MIT-licensed [axios](https://github.com/mzabriskie/axios). Thanks to [Nick Uraltsev](https://github.com/nickuraltsev), [Matt Zabriskie](https://github.com/mzabriskie) and the other contributors of that project!\n */\n/** @public */\nexport class Cancel {\n  __CANCEL__ = true\n\n  message: string\n\n  constructor(message: any) {\n    this.message = message\n  }\n\n  toString() {\n    return `Cancel${this.message ? `: ${this.message}` : ''}`\n  }\n}\n\n/** @public */\nexport class CancelToken {\n  promise: Promise<any>\n  reason?: Cancel\n\n  constructor(executor: any) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.')\n    }\n\n    let resolvePromise: any = null\n\n    this.promise = new Promise((resolve) => {\n      resolvePromise = resolve\n    })\n\n    executor((message: any) => {\n      if (this.reason) {\n        // Cancellation has already been requested\n        return\n      }\n\n      this.reason = new Cancel(message)\n      resolvePromise(this.reason)\n    })\n  }\n\n  static source = () => {\n    let cancel\n    const token = new CancelToken((can: any) => {\n      cancel = can\n    })\n\n    return {\n      token: token,\n      cancel: cancel,\n    }\n  }\n}\n\nconst isCancel = (value: any) => !!(value && value.__CANCEL__)\n\npromise.Cancel = Cancel\npromise.CancelToken = CancelToken\npromise.isCancel = isCancel\n","/** @public */\nexport function proxy(_proxy: any) {\n  if (_proxy !== false && (!_proxy || !_proxy.host)) {\n    throw new Error('Proxy middleware takes an object of host, port and auth properties')\n  }\n\n  return {\n    processOptions: (options: any) => Object.assign({proxy: _proxy}, options),\n  }\n}\n","export default (err: any, attempt: any, options: any) => {\n  if (options.method !== 'GET' && options.method !== 'HEAD') {\n    return false\n  }\n\n  return err.isNetworkError || false\n}\n","import type {RetryOptions} from '../../types'\n\nconst isStream = (stream: any) =>\n  stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function'\n\n/** @public */\nexport default (opts: RetryOptions): any => {\n  const maxRetries = opts.maxRetries || 5\n  const retryDelay = opts.retryDelay || getRetryDelay\n  const allowRetry = opts.shouldRetry\n\n  return {\n    onError: (err: any, context: any) => {\n      const options = context.options\n      const max = options.maxRetries || maxRetries\n      const shouldRetry = options.shouldRetry || allowRetry\n      const attemptNumber = options.attemptNumber || 0\n\n      // We can't retry if body is a stream, since it'll be drained\n      if (isStream(options.body)) {\n        return err\n      }\n\n      // Give up?\n      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n        return err\n      }\n\n      // Create a new context with an increased attempt number, so we can exit if we reach a limit\n      const newContext = Object.assign({}, context, {\n        options: Object.assign({}, options, {attemptNumber: attemptNumber + 1}),\n      })\n\n      // Wait a given amount of time before doing the request again\n      setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber))\n\n      // Signal that we've handled the error and that it should not propagate further\n      return null\n    },\n  }\n}\n\nfunction getRetryDelay(attemptNum: number) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100\n}\n","import type {RetryOptions} from '../../types'\nimport defaultShouldRetry from '../../util/browser-shouldRetry'\nimport sharedRetry from './shared-retry'\n\n/** @public */\nexport const retry = (opts: Partial<RetryOptions> = {}): any =>\n  sharedRetry({shouldRetry: defaultShouldRetry, ...opts})\n\nretry.shouldRetry = defaultShouldRetry\n","import {isPlainObject} from 'is-plain-object'\n\nimport {isBuffer} from '../util/isBuffer'\n\nfunction encode(data: Record<string, string | Set<number | string>>): string {\n  const query = new URLSearchParams()\n\n  const nest = (name: string, _value: unknown) => {\n    const value = _value instanceof Set ? Array.from(_value) : _value\n    if (Array.isArray(value)) {\n      if (value.length) {\n        for (const index in value) {\n          nest(`${name}[${index}]`, value[index])\n        }\n      } else {\n        query.append(`${name}[]`, '')\n      }\n    } else if (typeof value === 'object' && value !== null) {\n      for (const [key, obj] of Object.entries(value)) {\n        nest(`${name}[${key}]`, obj)\n      }\n    } else {\n      query.append(name, value as string)\n    }\n  }\n\n  for (const [key, value] of Object.entries(data)) {\n    nest(key, value)\n  }\n\n  return query.toString()\n}\n\n/** @public */\nexport function urlEncoded(): any {\n  return {\n    processOptions: (options: any) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize = !isStream && !isBuffer(body) && isPlainObject(body)\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return {\n        ...options,\n        body: encode(options.body),\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      }\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}