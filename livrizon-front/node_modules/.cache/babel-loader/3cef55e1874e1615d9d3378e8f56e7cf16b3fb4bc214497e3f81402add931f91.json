{"ast":null,"code":"import { processOptions, validateOptions } from './_chunks/defaultOptionsValidator-4ba94809.js';\nimport parseHeaders from 'parse-headers';\nvar middlewareReducer = middleware => {\n  const applyMiddleware = function (hook, defaultValue) {\n    const bailEarly = hook === \"onError\";\n    let value = defaultValue;\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i];\n      value = handler(value, ...args);\n      if (bailEarly && !value) {\n        break;\n      }\n    }\n    return value;\n  };\n  return applyMiddleware;\n};\nfunction createPubSub() {\n  const subscribers = /* @__PURE__ */Object.create(null);\n  let nextId = 0;\n  function subscribe(subscriber) {\n    const id = nextId++;\n    subscribers[id] = subscriber;\n    return function unsubscribe() {\n      delete subscribers[id];\n    };\n  }\n  function publish(event) {\n    for (const id in subscribers) {\n      subscribers[id](event);\n    }\n  }\n  return {\n    publish,\n    subscribe\n  };\n}\nconst channelNames = [\"request\", \"response\", \"progress\", \"error\", \"abort\"];\nconst middlehooks = [\"processOptions\", \"validateOptions\", \"interceptRequest\", \"finalizeOptions\", \"onRequest\", \"onResponse\", \"onError\", \"onReturn\", \"onHeaders\"];\nfunction createRequester(initMiddleware, httpRequest) {\n  const loadedMiddleware = [];\n  const middleware = middlehooks.reduce((ware, name) => {\n    ware[name] = ware[name] || [];\n    return ware;\n  }, {\n    processOptions: [processOptions],\n    validateOptions: [validateOptions]\n  });\n  function request(opts) {\n    const channels = channelNames.reduce((target, name) => {\n      target[name] = createPubSub();\n      return target;\n    }, {});\n    const applyMiddleware = middlewareReducer(middleware);\n    const options = applyMiddleware(\"processOptions\", opts);\n    applyMiddleware(\"validateOptions\", options);\n    const context = {\n      options,\n      channels,\n      applyMiddleware\n    };\n    let ongoingRequest = null;\n    const unsubscribe = channels.request.subscribe(ctx => {\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res, ctx));\n    });\n    channels.abort.subscribe(() => {\n      unsubscribe();\n      if (ongoingRequest) {\n        ongoingRequest.abort();\n      }\n    });\n    const returnValue = applyMiddleware(\"onReturn\", channels, context);\n    if (returnValue === channels) {\n      channels.request.publish(context);\n    }\n    return returnValue;\n    function onResponse(reqErr, res, ctx) {\n      let error = reqErr;\n      let response = res;\n      if (!error) {\n        try {\n          response = applyMiddleware(\"onResponse\", res, ctx);\n        } catch (err) {\n          response = null;\n          error = err;\n        }\n      }\n      error = error && applyMiddleware(\"onError\", error, ctx);\n      if (error) {\n        channels.error.publish(error);\n      } else if (response) {\n        channels.response.publish(response);\n      }\n    }\n  }\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error(\"Tried to add middleware that resolved to falsey value\");\n    }\n    if (typeof newMiddleware === \"function\") {\n      throw new Error(\"Tried to add middleware that was a function. It probably expects you to pass options to it.\");\n    }\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\"Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event\");\n    }\n    middlehooks.forEach(key => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key]);\n      }\n    });\n    loadedMiddleware.push(newMiddleware);\n    return request;\n  };\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware, httpRequest);\n  };\n  initMiddleware.forEach(request.use);\n  return request;\n}\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _method, _url, _resHeaders, _headers, _controller;\nclass FetchXhr {\n  constructor() {\n    /**\n     * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n     */\n    this.readyState = 0;\n    /**\n     * Private implementation details\n     */\n    __privateAdd(this, _method, void 0);\n    __privateAdd(this, _url, void 0);\n    __privateAdd(this, _resHeaders, void 0);\n    __privateAdd(this, _headers, {});\n    __privateAdd(this, _controller, void 0);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- _async is only declared for typings compatibility\n  open(method, url, _async) {\n    __privateSet(this, _method, method);\n    __privateSet(this, _url, url);\n    __privateSet(this, _resHeaders, \"\");\n    this.readyState = 1;\n    this.onreadystatechange();\n    __privateSet(this, _controller, void 0);\n  }\n  abort() {\n    if (__privateGet(this, _controller)) {\n      __privateGet(this, _controller).abort();\n    }\n  }\n  getAllResponseHeaders() {\n    return __privateGet(this, _resHeaders);\n  }\n  setRequestHeader(name, value) {\n    __privateGet(this, _headers)[name] = value;\n  }\n  send(body) {\n    const textBody = this.responseType !== \"arraybuffer\";\n    const options = {\n      method: __privateGet(this, _method),\n      headers: __privateGet(this, _headers),\n      signal: null,\n      body\n    };\n    if (typeof AbortController === \"function\") {\n      __privateSet(this, _controller, new AbortController());\n      options.signal = __privateGet(this, _controller).signal;\n    }\n    if (typeof document !== \"undefined\") {\n      options.credentials = this.withCredentials ? \"include\" : \"omit\";\n    }\n    fetch(__privateGet(this, _url), options).then(res => {\n      res.headers.forEach((value, key) => {\n        __privateSet(this, _resHeaders, __privateGet(this, _resHeaders) + \"\".concat(key, \": \").concat(value, \"\\r\\n\"));\n      });\n      this.status = res.status;\n      this.statusText = res.statusText;\n      this.readyState = 3;\n      return textBody ? res.text() : res.arrayBuffer();\n    }).then(resBody => {\n      if (typeof resBody === \"string\") {\n        this.responseText = resBody;\n      } else {\n        this.response = resBody;\n      }\n      this.readyState = 4;\n      this.onreadystatechange();\n    }).catch(err => {\n      var _a;\n      if (err.name === \"AbortError\") {\n        this.onabort();\n        return;\n      }\n      (_a = this.onerror) == null ? void 0 : _a.call(this, err);\n    });\n  }\n}\n_method = new WeakMap();\n_url = new WeakMap();\n_resHeaders = new WeakMap();\n_headers = new WeakMap();\n_controller = new WeakMap();\nconst adapter = typeof XMLHttpRequest === \"function\" ? \"xhr\" : \"fetch\";\nconst XmlHttpRequest = adapter === \"xhr\" ? XMLHttpRequest : FetchXhr;\nvar httpRequester = (context, callback) => {\n  const opts = context.options;\n  const options = context.applyMiddleware(\"finalizeOptions\", opts);\n  const timers = {};\n  const injectedResponse = context.applyMiddleware(\"interceptRequest\", void 0, {\n    adapter,\n    context\n  });\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse);\n    const cancel = () => clearTimeout(cbTimer);\n    return {\n      abort: cancel\n    };\n  }\n  let xhr = new XmlHttpRequest();\n  const headers = options.headers;\n  const delays = options.timeout;\n  let aborted = false;\n  let loaded = false;\n  let timedOut = false;\n  xhr.onerror = onError;\n  xhr.ontimeout = onError;\n  xhr.onabort = () => {\n    stopTimers(true);\n    aborted = true;\n  };\n  xhr.onreadystatechange = () => {\n    resetTimers();\n    if (aborted || xhr.readyState !== 4) {\n      return;\n    }\n    if (xhr.status === 0) {\n      return;\n    }\n    onLoad();\n  };\n  xhr.open(options.method, options.url, true\n  // Always async\n  );\n\n  xhr.withCredentials = !!options.withCredentials;\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n  if (options.rawBody) {\n    xhr.responseType = \"arraybuffer\";\n  }\n  context.applyMiddleware(\"onRequest\", {\n    options,\n    adapter,\n    request: xhr,\n    context\n  });\n  xhr.send(options.body || null);\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest(\"ETIMEDOUT\"), delays.connect);\n  }\n  return {\n    abort\n  };\n  function abort() {\n    aborted = true;\n    if (xhr) {\n      xhr.abort();\n    }\n  }\n  function timeoutRequest(code) {\n    timedOut = true;\n    xhr.abort();\n    const error = new Error(code === \"ESOCKETTIMEDOUT\" ? \"Socket timed out on request to \".concat(options.url) : \"Connection timed out on request to \".concat(options.url));\n    error.code = code;\n    context.channels.error.publish(error);\n  }\n  function resetTimers() {\n    if (!delays) {\n      return;\n    }\n    stopTimers();\n    timers.socket = setTimeout(() => timeoutRequest(\"ESOCKETTIMEDOUT\"), delays.socket);\n  }\n  function stopTimers(force) {\n    if (force || aborted || xhr.readyState >= 2 && timers.connect) {\n      clearTimeout(timers.connect);\n    }\n    if (timers.socket) {\n      clearTimeout(timers.socket);\n    }\n  }\n  function onError(error) {\n    if (loaded) {\n      return;\n    }\n    stopTimers(true);\n    loaded = true;\n    xhr = null;\n    const err = error || new Error(\"Network error while attempting to reach \".concat(options.url));\n    err.isNetworkError = true;\n    err.request = options;\n    callback(err);\n  }\n  function reduceResponse() {\n    return {\n      body: xhr.response || xhr.responseText,\n      url: options.url,\n      method: options.method,\n      headers: parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: xhr.status,\n      statusMessage: xhr.statusText\n    };\n  }\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return;\n    }\n    if (xhr.status === 0) {\n      onError(new Error(\"Unknown XHR error\"));\n      return;\n    }\n    stopTimers();\n    loaded = true;\n    callback(null, reduceResponse());\n  }\n};\nconst getIt = function () {\n  let initMiddleware = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let httpRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : httpRequester;\n  return createRequester(initMiddleware, httpRequest);\n};\nexport { getIt };","map":{"version":3,"mappings":"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","names":["middlewareReducer","middleware","applyMiddleware","hook","bailEarly","value","args","i","length","handler","createPubSub","nextId","subscribe","subscriber","id","subscribers","unsubscribe","publish","event","channelNames","middlehooks","initMiddleware","httpRequest","loadedMiddleware","ware","name","processOptions","validateOptions","request","opts","channels","reduce","target","pubsub","options","context","ongoingRequest","ctx","err","res","onResponse","abort","returnValue","reqErr","error","response","use","newMiddleware","Error","key","push","clone","FetchXhr","constructor","__privateAdd","open","method","_async","__privateSet","_method","_url","_resHeaders","readyState","onreadystatechange","_controller","__privateGet","getAllResponseHeaders","setRequestHeader","send","body","responseType","headers","signal","AbortController","document","fetch","status","statusText","textBody","text","arrayBuffer","then","resBody","responseText","catch","onabort","onerror","_headers","adapter","XMLHttpRequest","XmlHttpRequest","callback","timers","injectedResponse","cbTimer","clearTimeout","cancel","delays","aborted","loaded","timedOut","xhr","ontimeout","stopTimers","resetTimers","onLoad","hasOwnProperty","rawBody","connect","setTimeout","timeoutRequest","code","socket","force","onError","url","isNetworkError","reduceResponse","statusCode","statusMessage","createRequester"],"sources":["/Users/rgthardkor/node_modules/get-it/src/util/middlewareReducer.ts","/Users/rgthardkor/node_modules/get-it/src/util/pubsub.ts","/Users/rgthardkor/node_modules/get-it/src/createRequester.ts","/Users/rgthardkor/node_modules/get-it/src/request/browser/fetchXhr.ts","/Users/rgthardkor/node_modules/get-it/src/request/browser-request.ts","/Users/rgthardkor/node_modules/get-it/src/index.browser.ts"],"sourcesContent":["export default (middleware: any) => {\n  const applyMiddleware = (hook: any, defaultValue: any, ...args: any[]) => {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  }\n\n  return applyMiddleware\n}\n","// Code borrowed from https://github.com/bjoerge/nano-pubsub\n\nexport interface Subscriber<Event> {\n  (event: Event): void\n}\nexport interface PubSub<Message> {\n  publish: (message: Message) => void\n  subscribe: (subscriber: Subscriber<Message>) => () => void\n}\n\nexport default function createPubSub<Message = void>(): PubSub<Message> {\n  const subscribers: {[id: string]: Subscriber<Message>} = Object.create(null)\n  let nextId = 0\n  function subscribe(subscriber: Subscriber<Message>) {\n    const id = nextId++\n    subscribers[id] = subscriber\n    return function unsubscribe() {\n      delete subscribers[id]\n    }\n  }\n\n  function publish(event: Message) {\n    for (const id in subscribers) {\n      subscribers[id](event)\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n","import {processOptions} from './middleware/defaultOptionsProcessor'\nimport {validateOptions} from './middleware/defaultOptionsValidator'\nimport type {HttpRequest, Middleware, Middlewares, Requester} from './types'\nimport middlewareReducer from './util/middlewareReducer'\nimport pubsub from './util/pubsub'\n\nconst channelNames = ['request', 'response', 'progress', 'error', 'abort']\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders',\n]\n\n/** @public */\nexport function createRequester(initMiddleware: Middlewares, httpRequest: HttpRequest): Requester {\n  const loadedMiddleware: any[] = []\n  const middleware = middlehooks.reduce(\n    (ware: any, name: any) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions],\n    }\n  )\n\n  function request(opts: any) {\n    const channels = channelNames.reduce((target: any, name: any): any => {\n      target[name] = pubsub()\n      return target\n    }, {})\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest: any = null\n    const unsubscribe = channels.request.subscribe((ctx: any) => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err: any, res: any) => onResponse(err, res, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n\n    function onResponse(reqErr: any, res: any, ctx: any) {\n      let error = reqErr\n      let response = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware: Middleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach((key) => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key])\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware, httpRequest)\n  }\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n","/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nexport class FetchXhr\n  implements Pick<XMLHttpRequest, 'open' | 'abort' | 'getAllResponseHeaders' | 'setRequestHeader'>\n{\n  /**\n   * Public interface, interop with real XMLHttpRequest\n   */\n  onabort: () => void\n  onerror: (error?: any) => void\n  onreadystatechange: () => void\n  ontimeout: XMLHttpRequest['ontimeout']\n  /**\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n   */\n  readyState: 0 | 1 | 2 | 3 | 4 = 0\n  response: XMLHttpRequest['response']\n  responseText: XMLHttpRequest['responseText']\n  responseType: XMLHttpRequest['responseType']\n  status: XMLHttpRequest['status']\n  statusText: XMLHttpRequest['statusText']\n  withCredentials: XMLHttpRequest['withCredentials']\n\n  /**\n   * Private implementation details\n   */\n  #method: string\n  #url: string\n  #resHeaders: string\n  #headers: Record<string, string> = {}\n  #controller?: AbortController\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- _async is only declared for typings compatibility\n  open(method: string, url: string, _async?: boolean) {\n    this.#method = method\n    this.#url = url\n    this.#resHeaders = ''\n    this.readyState = 1 // Open\n    this.onreadystatechange()\n    this.#controller = undefined\n  }\n  abort() {\n    if (this.#controller) {\n      this.#controller.abort()\n    }\n  }\n  getAllResponseHeaders() {\n    return this.#resHeaders\n  }\n  setRequestHeader(name: string, value: string) {\n    this.#headers[name] = value\n  }\n  send(body: BodyInit) {\n    const textBody = this.responseType !== 'arraybuffer'\n    const options: RequestInit = {\n      method: this.#method,\n      headers: this.#headers,\n      signal: null,\n      body,\n    }\n    if (typeof AbortController === 'function') {\n      this.#controller = new AbortController()\n      options.signal = this.#controller.signal\n    }\n\n    // Some environments (like CloudFlare workers) don't support credentials in\n    // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n    // so for now let's just make do with a document check :/\n    if (typeof document !== 'undefined') {\n      options.credentials = this.withCredentials ? 'include' : 'omit'\n    }\n\n    fetch(this.#url, options)\n      .then((res): Promise<string | ArrayBuffer> => {\n        res.headers.forEach((value: any, key: any) => {\n          this.#resHeaders += `${key}: ${value}\\r\\n`\n        })\n        this.status = res.status\n        this.statusText = res.statusText\n        this.readyState = 3 // Loading\n        return textBody ? res.text() : res.arrayBuffer()\n      })\n      .then((resBody) => {\n        if (typeof resBody === 'string') {\n          this.responseText = resBody\n        } else {\n          this.response = resBody\n        }\n        this.readyState = 4 // Done\n        this.onreadystatechange()\n      })\n      .catch((err: Error) => {\n        if (err.name === 'AbortError') {\n          this.onabort()\n          return\n        }\n\n        this.onerror?.(err)\n      })\n  }\n}\n","import parseHeaders from 'parse-headers'\n\nimport {FetchXhr} from './browser/fetchXhr'\n\n// Use fetch if it's available, non-browser environments such as Deno, Edge Runtime and more provide fetch as a global but doesn't provide xhr\nconst adapter = typeof XMLHttpRequest === 'function' ? 'xhr' : 'fetch'\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nconst XmlHttpRequest = adapter === 'xhr' ? XMLHttpRequest : FetchXhr\n\nexport default (context: any, callback: any) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts)\n  const timers: any = {}\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = new XmlHttpRequest()\n\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = onError\n  xhr.ontimeout = onError\n  xhr.onabort = () => {\n    stopTimers(true)\n    aborted = true\n  }\n\n  xhr.onreadystatechange = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || xhr.readyState !== 4) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method,\n    options.url,\n    true // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code: any) {\n    timedOut = true\n    xhr.abort()\n    const error: any = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers(force?: boolean) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error?: any) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers(true)\n    loaded = true\n    ;(xhr as any) = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = error || new Error(`Network error while attempting to reach ${options.url}`)\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse() {\n    return {\n      body: xhr.response || xhr.responseText,\n      url: options.url,\n      method: options.method,\n      headers: parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: xhr.status,\n      statusMessage: xhr.statusText,\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n","import {createRequester} from './createRequester'\nimport httpRequester from './request/browser-request'\nimport type {HttpRequest, Middlewares, Requester} from './types'\n\nexport * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester\n): Requester => createRequester(initMiddleware, httpRequest)\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}