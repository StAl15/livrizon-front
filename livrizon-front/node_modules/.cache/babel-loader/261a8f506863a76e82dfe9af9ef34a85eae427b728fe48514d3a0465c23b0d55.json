{"ast":null,"code":"const isReactNative = typeof navigator === \"undefined\" ? false : navigator.product === \"ReactNative\";\nconst defaultOptions = {\n  timeout: isReactNative ? 6e4 : 12e4\n};\nfunction processOptions(opts) {\n  const options = typeof opts === \"string\" ? Object.assign({\n    url: opts\n  }, defaultOptions) : Object.assign({}, defaultOptions, opts);\n  const url = new URL(options.url, \"http://localhost\");\n  options.timeout = normalizeTimeout(options.timeout);\n  if (options.query) {\n    for (const [key, value] of Object.entries(options.query)) {\n      if (value !== void 0) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            url.searchParams.append(key, v);\n          }\n        } else {\n          url.searchParams.append(key, value);\n        }\n      }\n    }\n  }\n  options.method = options.body && !options.method ? \"POST\" : (options.method || \"GET\").toUpperCase();\n  options.url = url.origin === \"http://localhost\" ? \"\".concat(url.pathname, \"?\").concat(url.searchParams) : url.toString();\n  return options;\n}\nfunction normalizeTimeout(time) {\n  if (time === false || time === 0) {\n    return false;\n  }\n  if (time.connect || time.socket) {\n    return time;\n  }\n  const delay = Number(time);\n  if (isNaN(delay)) {\n    return normalizeTimeout(defaultOptions.timeout);\n  }\n  return {\n    connect: delay,\n    socket: delay\n  };\n}\nconst validUrl = /^https?:\\/\\//i;\nfunction validateOptions(options) {\n  if (!validUrl.test(options.url)) {\n    throw new Error(\"\\\"\".concat(options.url, \"\\\" is not a valid URL\"));\n  }\n}\nexport { processOptions, validateOptions };","map":{"version":3,"mappings":"AAAA,MAAMA,gBAAgB,OAAOC,cAAc,WAAc,WAAQA,UAAUC,OAAY;AAEvF,MAAMC,cAAiB;EAACC,OAAS,kBAAgB,MAAQ;AAAM;AAGxD,SAASC,eAAeC,IAAgB;EAC7C,MAAMC,UACJ,OAAOD,SAAS,QACZ,UAAOE,OAAO;IAACC,KAAKH;EAAI,GAAGH,cAAc,CACzC,UAAOK,OAAO,EAAC,EAAGL,gBAAgBG,IAAI;EAG5C,MAAMG,GAAM,OAAIC,GAAI,SAAQD,KAAK,kBAAkB;EAG3CF,kBAAUI,gBAAiB,SAAQP,OAAO;EAGlD,IAAIG,QAAQK,KAAO;IACN,YAACC,KAAKC,KAAK,KAAKC,OAAOC,OAAQ,SAAQJ,KAAK,CAAG;MACxD,IAAIE,UAAU,KAAW;QACnB,UAAMG,OAAQ,MAAK,CAAG;UACxB,WAAWC,KAAKJ,KAAO;YACjBL,iBAAaU,MAAO,MAAKD,CAAW;UAC1C;QAAA,CACK;UACDT,iBAAaU,MAAO,MAAKL,KAAe;QAC9C;MACF;IACF;EACF;EAGQP,iBACNA,OAAQ,SAAQ,CAACA,QAAQa,SAAS,MAAU,YAAQA,MAAU,WAAOC,WAAY;EAG3Ed,cACNE,GAAI,YAAW,kBAAqB,aAAGA,IAAIa,QAAY,kBAAIC,YAAiB,QAAIC,QAAS;EAEpF;AACT;AAEA,SAASb,iBAAiBc,IAAgB;EACpC,aAAS,KAAS,aAAS,CAAG;IACzB;EACT;EAEI,SAAKC,OAAW,SAAKC,MAAQ;IACxB;EACT;EAEM,cAAQC,OAAOH,IAAI;EACrB,UAAMI,KAAK,CAAG;IACT,wBAAiB1B,eAAeC,OAAO;EAChD;EAEA,OAAO;IAACsB,SAASG,KAAO;IAAAF,QAAQE;EAAK;AACvC;AC1DA,MAAMC,QAAW;AAGV,SAASC,gBAAgBxB,OAAmB;EACjD,IAAI,CAACuB,SAASE,IAAK,SAAQvB,GAAG,CAAG;IAC/B,MAAM,IAAIwB,kBAAU1B,QAAQE,GAAyB;EACvD;AACF","names":["isReactNative","navigator","product","defaultOptions","timeout","processOptions","opts","options","assign","url","URL","normalizeTimeout","query","key","value","Object","entries","isArray","v","append","method","toUpperCase","pathname","searchParams","toString","time","connect","socket","Number","delay","validUrl","validateOptions","test","Error"],"sources":["/Users/rgthardkor/node_modules/get-it/src/middleware/defaultOptionsProcessor.ts","/Users/rgthardkor/node_modules/get-it/src/middleware/defaultOptionsValidator.ts"],"sourcesContent":["const isReactNative = typeof navigator === 'undefined' ? false : navigator.product === 'ReactNative'\n\nconst defaultOptions = {timeout: isReactNative ? 60000 : 120000}\n\n/** @public */\nexport function processOptions(opts: any): any {\n  const options =\n    typeof opts === 'string'\n      ? Object.assign({url: opts}, defaultOptions)\n      : Object.assign({}, defaultOptions, opts)\n\n  // Allow parsing relativ URLs by setting the origin\n  const url = new URL(options.url, 'http://localhost')\n\n  // Normalize timeouts\n  options.timeout = normalizeTimeout(options.timeout)\n\n  // Shallow-merge (override) existing query params\n  if (options.query) {\n    for (const [key, value] of Object.entries(options.query)) {\n      if (value !== undefined) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            url.searchParams.append(key, v as string)\n          }\n        } else {\n          url.searchParams.append(key, value as string)\n        }\n      }\n    }\n  }\n\n  // Implicit POST if we have not specified a method but have a body\n  options.method =\n    options.body && !options.method ? 'POST' : (options.method || 'GET').toUpperCase()\n\n  // Stringify URL\n  options.url =\n    url.origin === 'http://localhost' ? `${url.pathname}?${url.searchParams}` : url.toString()\n\n  return options\n}\n\nfunction normalizeTimeout(time: any): any {\n  if (time === false || time === 0) {\n    return false\n  }\n\n  if (time.connect || time.socket) {\n    return time\n  }\n\n  const delay = Number(time)\n  if (isNaN(delay)) {\n    return normalizeTimeout(defaultOptions.timeout)\n  }\n\n  return {connect: delay, socket: delay}\n}\n","const validUrl = /^https?:\\/\\//i\n\n/** @public */\nexport function validateOptions(options: any): any {\n  if (!validUrl.test(options.url)) {\n    throw new Error(`\"${options.url}\" is not a valid URL`)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}